/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { WhirlpoolRewardInfo, whirlpoolRewardInfoBeet } from '../types/WhirlpoolRewardInfo';

/**
 * Arguments used to create {@link Whirlpool}
 * @category Accounts
 * @category generated
 */
export type WhirlpoolArgs = {
  whirlpoolsConfig: web3.PublicKey;
  whirlpoolBump: number[] /* size: 1 */;
  tickSpacing: number;
  tickSpacingSeed: number[] /* size: 2 */;
  feeRate: number;
  protocolFeeRate: number;
  liquidity: beet.bignum;
  sqrtPrice: beet.bignum;
  tickCurrentIndex: number;
  protocolFeeOwedA: beet.bignum;
  protocolFeeOwedB: beet.bignum;
  tokenMintA: web3.PublicKey;
  tokenVaultA: web3.PublicKey;
  feeGrowthGlobalA: beet.bignum;
  tokenMintB: web3.PublicKey;
  tokenVaultB: web3.PublicKey;
  feeGrowthGlobalB: beet.bignum;
  rewardLastUpdatedTimestamp: beet.bignum;
  rewardInfos: WhirlpoolRewardInfo[] /* size: 3 */;
};

export const whirlpoolDiscriminator = [63, 149, 209, 12, 225, 128, 99, 9];
/**
 * Holds the data for the {@link Whirlpool} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Whirlpool implements WhirlpoolArgs {
  private constructor(
    readonly whirlpoolsConfig: web3.PublicKey,
    readonly whirlpoolBump: number[] /* size: 1 */,
    readonly tickSpacing: number,
    readonly tickSpacingSeed: number[] /* size: 2 */,
    readonly feeRate: number,
    readonly protocolFeeRate: number,
    readonly liquidity: beet.bignum,
    readonly sqrtPrice: beet.bignum,
    readonly tickCurrentIndex: number,
    readonly protocolFeeOwedA: beet.bignum,
    readonly protocolFeeOwedB: beet.bignum,
    readonly tokenMintA: web3.PublicKey,
    readonly tokenVaultA: web3.PublicKey,
    readonly feeGrowthGlobalA: beet.bignum,
    readonly tokenMintB: web3.PublicKey,
    readonly tokenVaultB: web3.PublicKey,
    readonly feeGrowthGlobalB: beet.bignum,
    readonly rewardLastUpdatedTimestamp: beet.bignum,
    readonly rewardInfos: WhirlpoolRewardInfo[] /* size: 3 */,
  ) {}

  /**
   * Creates a {@link Whirlpool} instance from the provided args.
   */
  static fromArgs(args: WhirlpoolArgs) {
    return new Whirlpool(
      args.whirlpoolsConfig,
      args.whirlpoolBump,
      args.tickSpacing,
      args.tickSpacingSeed,
      args.feeRate,
      args.protocolFeeRate,
      args.liquidity,
      args.sqrtPrice,
      args.tickCurrentIndex,
      args.protocolFeeOwedA,
      args.protocolFeeOwedB,
      args.tokenMintA,
      args.tokenVaultA,
      args.feeGrowthGlobalA,
      args.tokenMintB,
      args.tokenVaultB,
      args.feeGrowthGlobalB,
      args.rewardLastUpdatedTimestamp,
      args.rewardInfos,
    );
  }

  /**
   * Deserializes the {@link Whirlpool} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [Whirlpool, number] {
    return Whirlpool.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Whirlpool} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Whirlpool> {
    const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
    if (accountInfo == null) {
      throw new Error(`Unable to find Whirlpool account at ${address}`);
    }
    return Whirlpool.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('5G76ijPLinxx8tZai4hYkhoBkb2QidrX9BuJiEpuJhs7'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, whirlpoolBeet);
  }

  /**
   * Deserializes the {@link Whirlpool} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Whirlpool, number] {
    return whirlpoolBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Whirlpool} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return whirlpoolBeet.serialize({
      accountDiscriminator: whirlpoolDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Whirlpool}
   */
  static get byteSize() {
    return whirlpoolBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Whirlpool} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(Whirlpool.byteSize, commitment);
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Whirlpool} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Whirlpool.byteSize;
  }

  /**
   * Returns a readable version of {@link Whirlpool} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      whirlpoolsConfig: this.whirlpoolsConfig.toBase58(),
      whirlpoolBump: this.whirlpoolBump,
      tickSpacing: this.tickSpacing,
      tickSpacingSeed: this.tickSpacingSeed,
      feeRate: this.feeRate,
      protocolFeeRate: this.protocolFeeRate,
      liquidity: (() => {
        const x = <{ toNumber: () => number }>this.liquidity;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      sqrtPrice: (() => {
        const x = <{ toNumber: () => number }>this.sqrtPrice;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      tickCurrentIndex: this.tickCurrentIndex,
      protocolFeeOwedA: (() => {
        const x = <{ toNumber: () => number }>this.protocolFeeOwedA;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      protocolFeeOwedB: (() => {
        const x = <{ toNumber: () => number }>this.protocolFeeOwedB;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      tokenMintA: this.tokenMintA.toBase58(),
      tokenVaultA: this.tokenVaultA.toBase58(),
      feeGrowthGlobalA: (() => {
        const x = <{ toNumber: () => number }>this.feeGrowthGlobalA;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      tokenMintB: this.tokenMintB.toBase58(),
      tokenVaultB: this.tokenVaultB.toBase58(),
      feeGrowthGlobalB: (() => {
        const x = <{ toNumber: () => number }>this.feeGrowthGlobalB;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      rewardLastUpdatedTimestamp: (() => {
        const x = <{ toNumber: () => number }>this.rewardLastUpdatedTimestamp;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      rewardInfos: this.rewardInfos,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const whirlpoolBeet = new beet.BeetStruct<
  Whirlpool,
  WhirlpoolArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['whirlpoolsConfig', beetSolana.publicKey],
    ['whirlpoolBump', beet.uniformFixedSizeArray(beet.u8, 1)],
    ['tickSpacing', beet.u16],
    ['tickSpacingSeed', beet.uniformFixedSizeArray(beet.u8, 2)],
    ['feeRate', beet.u16],
    ['protocolFeeRate', beet.u16],
    ['liquidity', beet.u128],
    ['sqrtPrice', beet.u128],
    ['tickCurrentIndex', beet.i32],
    ['protocolFeeOwedA', beet.u64],
    ['protocolFeeOwedB', beet.u64],
    ['tokenMintA', beetSolana.publicKey],
    ['tokenVaultA', beetSolana.publicKey],
    ['feeGrowthGlobalA', beet.u128],
    ['tokenMintB', beetSolana.publicKey],
    ['tokenVaultB', beetSolana.publicKey],
    ['feeGrowthGlobalB', beet.u128],
    ['rewardLastUpdatedTimestamp', beet.u64],
    ['rewardInfos', beet.uniformFixedSizeArray(whirlpoolRewardInfoBeet, 3)],
  ],
  Whirlpool.fromArgs,
  'Whirlpool',
);
