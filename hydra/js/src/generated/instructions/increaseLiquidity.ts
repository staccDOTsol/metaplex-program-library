/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category IncreaseLiquidity
 * @category generated
 */
export type IncreaseLiquidityInstructionArgs = {
  bump: number;
  tickSpacing: number;
  shares: beet.bignum;
};
/**
 * @category Instructions
 * @category IncreaseLiquidity
 * @category generated
 */
export const increaseLiquidityStruct = new beet.BeetArgsStruct<
  IncreaseLiquidityInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['tickSpacing', beet.i32],
    ['shares', beet.u64],
  ],
  'IncreaseLiquidityInstructionArgs',
);
/**
 * Accounts required by the _increaseLiquidity_ instruction
 *
 * @property [_writable_] whirlpool
 * @property [] positionAuthority
 * @property [_writable_] position
 * @property [] positionTokenAccount
 * @property [_writable_] tokenOwnerAccountA
 * @property [_writable_] tokenOwnerAccountB
 * @property [_writable_] tokenVaultA
 * @property [_writable_] tokenVaultB
 * @property [_writable_] tickArrayLower
 * @property [_writable_] tickArrayUpper
 * @property [] whirlpoolProgram
 * @property [] membershipVoucher
 * @category Instructions
 * @category IncreaseLiquidity
 * @category generated
 */
export type IncreaseLiquidityInstructionAccounts = {
  whirlpool: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  positionAuthority: web3.PublicKey;
  position: web3.PublicKey;
  positionTokenAccount: web3.PublicKey;
  tokenOwnerAccountA: web3.PublicKey;
  tokenOwnerAccountB: web3.PublicKey;
  tokenVaultA: web3.PublicKey;
  tokenVaultB: web3.PublicKey;
  tickArrayLower: web3.PublicKey;
  tickArrayUpper: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  whirlpoolProgram: web3.PublicKey;
  membershipVoucher: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const increaseLiquidityInstructionDiscriminator = [46, 156, 243, 118, 13, 205, 251, 178];

/**
 * Creates a _IncreaseLiquidity_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category IncreaseLiquidity
 * @category generated
 */
export function createIncreaseLiquidityInstruction(
  accounts: IncreaseLiquidityInstructionAccounts,
  args: IncreaseLiquidityInstructionArgs,
  programId = new web3.PublicKey('91TwXG4wTqJSm6GU8yn2AfBaTqvRi8XPurpkHHNVU7z4'),
) {
  const [data] = increaseLiquidityStruct.serialize({
    instructionDiscriminator: increaseLiquidityInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.whirlpool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.positionAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.position,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.positionTokenAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerAccountA,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerAccountB,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenVaultA,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenVaultB,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tickArrayLower,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tickArrayUpper,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.whirlpoolProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.membershipVoucher,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
