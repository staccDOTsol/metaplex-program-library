/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category CheckPosition
 * @category generated
 */
export type CheckPositionInstructionArgs = {
  tickSpacing: number;
};
/**
 * @category Instructions
 * @category CheckPosition
 * @category generated
 */
export const checkPositionStruct = new beet.BeetArgsStruct<
  CheckPositionInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['tickSpacing', beet.i32],
  ],
  'CheckPositionInstructionArgs',
);
/**
 * Accounts required by the _checkPosition_ instruction
 *
 * @property [_writable_] owner
 * @property [_writable_] position
 * @property [_writable_] whirlpool
 * @property [] user
 * @category Instructions
 * @category CheckPosition
 * @category generated
 */
export type CheckPositionInstructionAccounts = {
  owner: web3.PublicKey;
  position: web3.PublicKey;
  whirlpool: web3.PublicKey;
  user: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const checkPositionInstructionDiscriminator = [208, 242, 101, 15, 55, 242, 83, 5];

/**
 * Creates a _CheckPosition_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CheckPosition
 * @category generated
 */
export function createCheckPositionInstruction(
  accounts: CheckPositionInstructionAccounts,
  args: CheckPositionInstructionArgs,
  programId = new web3.PublicKey('5G76ijPLinxx8tZai4hYkhoBkb2QidrX9BuJiEpuJhs7'),
) {
  const [data] = checkPositionStruct.serialize({
    instructionDiscriminator: checkPositionInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.position,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.whirlpool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.user,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
