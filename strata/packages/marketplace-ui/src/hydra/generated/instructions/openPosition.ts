/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category OpenPosition
 * @category generated
 */
export type OpenPositionInstructionArgs = {
  bump: number;
  tickSpacing: number;
  positionBump: number;
};
/**
 * @category Instructions
 * @category OpenPosition
 * @category generated
 */
export const openPositionStruct = new beet.BeetArgsStruct<
  OpenPositionInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['tickSpacing', beet.i32],
    ['positionBump', beet.u8],
  ],
  'OpenPositionInstructionArgs',
);
/**
 * Accounts required by the _openPosition_ instruction
 *
 * @property [_writable_, **signer**] funder
 * @property [] owner
 * @property [] position
 * @property [] positionMint
 * @property [] positionTokenAccount
 * @property [] whirlpool
 * @property [] associatedTokenProgram
 * @property [] whirlpoolProgram
 * @property [_writable_] membershipVoucher
 * @category Instructions
 * @category OpenPosition
 * @category generated
 */
export type OpenPositionInstructionAccounts = {
  funder: web3.PublicKey;
  owner: web3.PublicKey;
  position: web3.PublicKey;
  positionMint: web3.PublicKey;
  positionTokenAccount: web3.PublicKey;
  whirlpool: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  rent?: web3.PublicKey;
  associatedTokenProgram: web3.PublicKey;
  whirlpoolProgram: web3.PublicKey;
  membershipVoucher: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const openPositionInstructionDiscriminator = [135, 128, 47, 77, 15, 152, 240, 49];

/**
 * Creates a _OpenPosition_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category OpenPosition
 * @category generated
 */
export function createOpenPositionInstruction(
  accounts: OpenPositionInstructionAccounts,
  args: OpenPositionInstructionArgs,
  programId = new web3.PublicKey('4FaasgwTwZnDjzWnduUF3Jsw4zrxBhBMNHRATEAKHWU6'),
) {
  const [data] = openPositionStruct.serialize({
    instructionDiscriminator: openPositionInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.funder,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.owner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.position,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.positionMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.positionTokenAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.whirlpool,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.whirlpoolProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.membershipVoucher,
      isWritable: true,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
